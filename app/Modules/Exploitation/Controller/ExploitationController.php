<?php

namespace App\Modules\Exploitation\Controller;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use App\Modules\Exploitation\Repositories\ExploitationRepositoryInterface;
use App\Modules\Facebook\Repositories\Account\AccountRepositoryInterface;
use App\Modules\Exploitation\Repositories\LikeRepositories\LikeRepositoryInterface;
use App\Modules\Exploitation\Repositories\ShareRepositories\ShareRepositoryInterface;

class ExploitationController extends Controller
{
    protected $exploitationRepository;
    protected $accountRepository;
    protected $likeRepository;
    protected $shareRepository;

    public function __construct(ExploitationRepositoryInterface $exploitationRepository, AccountRepositoryInterface $accountRepository, LikeRepositoryInterface $likeRepository, ShareRepositoryInterface $shareRepository)
    {
        $this->exploitationRepository = $exploitationRepository;
        $this->accountRepository = $accountRepository;
        $this->likeRepository = $likeRepository;
        $this->shareRepository = $shareRepository;
    }

    public function sub_page()
    {
        $liveAccounts = $this->accountRepository->countAccounts(['status' => 'LIVE']);

      
        return view('Exploitation::sub_page' , compact('liveAccounts'));
    }

    public function getAllSubpages()
    {
        return $this->exploitationRepository->findAll();
    }

    public function createSubpage(Request $request)
    {
        // Bước 1: Xác thực dữ liệu đầu vào
        $data = $request->validate([
            'uid_sub'     => 'required|string',
            'quantity'    => 'required|integer',
            'daily_run'   => 'required|integer',
            'delay'       => 'required|integer',
            'note'        => 'nullable|string',
        ]);

        $quantity = $data['quantity'];

        $availableAccounts = $this->accountRepository->countAccounts();

        if ($quantity > $availableAccounts) {
            return response()->json([
                'message' => 'Hệ thống không đủ tài nguyên để đáp ứng nhu cầu'
            ], 200);
        }

        $data['last_run']     = date("Y/m/d H:i:s");
        $data['follow_start'] = 0;
        $data['follow_stop']  = 0;

        $this->exploitationRepository->create($data);

        return response()->json(['message' => 'Thêm mới thành công'], 201);
    }

    public function updateSubpage(Request $request, $id)
    {
        $data = $request->validate([
            'uid_sub'      => 'required|string',
            'quantity'     => 'required|integer',
            'daily_run'    => 'required|integer',
            'delay'        => 'required|integer',
            'note'         => 'nullable|string',
            'follow_start' => 'nullable|integer',
            'follow_stop'  => 'nullable|integer',
            'today_run'    => 'nullable|integer',
        ]);

        $quantity = $data['quantity'];
        $availableAccounts = $this->accountRepository->countAccounts();

        if ($quantity > $availableAccounts) {
            return response()->json([
                'message' => 'Hệ thống không đủ tài nguyên để đáp ứng nhu cầu'
            ], 200);
        }

        // Cập nhật
        $updated = $this->exploitationRepository->update($id, $data);

        if ($updated) {
            return response()->json(['message' => 'Cập nhật thành công'], 200);
        }
        return response()->json(['message' => 'Cập nhật thất bại'], 200);
    }

    public function getSubpageById($id)
    {
        $subpage = $this->exploitationRepository->findById($id);
        if (!$subpage) {
            return response()->json(['message' => 'Subpage not found'], 404);
        }

        $data = [
            'uid_sub'      => $subpage->uid_sub,
            'quantity'     => $subpage->quantity,
            'daily_run'    => $subpage->daily_run,
            'delay'        => $subpage->delay,
            'note'         => $subpage->note,
            'last_run'     => isset($subpage->last_run) ? $subpage->last_run : '',
            'follow_start' => isset($subpage->follow_start) ? $subpage->follow_start : 0,
            'follow_stop'  => isset($subpage->follow_stop) ? $subpage->follow_stop : 0,
            'today_run'    => isset($subpage->today_run) ? $subpage->today_run : 0,
            '_id'          => $subpage->_id, // nếu cần, convert sang dạng string
        ];

        return response()->json($data);
    }

    public function deleteSubpage($id)
    {
        $deleted = $this->exploitationRepository->delete($id);
        if ($deleted) {
            return response()->json(['message' => 'Xóa thành công']);
        }
        return response()->json(['message' => 'Xóa thất bại'], 200);
    }


    public function like_page()
    {
        return view('Exploitation::like_page');
    }

    public function getAllLikes()
    {
        return $this->likeRepository->findAll();
    }

    // Lấy Like theo ID
    public function getLikeById($id)
    {
        $like = $this->likeRepository->findById($id);
        if ($like) {
            return response()->json([
                'uid_like'    => $like->uid_like,
                'quantity'    => $like->quantity,
                'daily_run'   => $like->daily_run,
                'delay'       => $like->delay,
                'note'        => $like->note,
                'last_run'    => $like->last_run,
                'like_start' => $like->like_start,
                'like_stop' => $like->like_stop,
                'today_run'   => $like->today_run,
                '_id'         => [
                    '$oid' => (string) $like->_id
                ]
            ]);
        }
        return response()->json(['message' => 'Like not found'], 404);
    }

    // Tạo mới Like
    public function createLike(Request $request)
    {
        // Bước 1: Xác thực dữ liệu đầu vào
        $data = $request->validate([
            'uid_like'     => 'required|string',
            'quantity'     => 'required|integer',
            'daily_run'    => 'required|integer',
            'delay'        => 'required|integer',
            'note'         => 'nullable|string',
        ]);

        // Không cần kiểm tra số lượng tài khoản

        $data['last_run']     = date("Y/m/d H:i:s");
        $data['like_start'] = 0;
        $data['like_stop']  = 0;
        $data['today_run']    = 0;

        $this->likeRepository->create($data);

        return response()->json(['message' => 'Thêm mới thành công'], 201);
    }

    // Cập nhật Like
    public function updateLike(Request $request, $id)
    {
        $data = $request->validate([
            'uid_like'     => 'required|string',
            'quantity'     => 'required|integer',
            'daily_run'    => 'required|integer',
            'delay'        => 'required|integer',
            'note'         => 'nullable|string',
        ]);

        // Không cần kiểm tra số lượng tài khoản

        $data['last_run'] = date("Y/m/d H:i:s"); // Cập nhật thời gian chạy lại
        // Có thể cập nhật các trường khác nếu cần

        $updated = $this->likeRepository->update($id, $data);

        if ($updated) {
            return response()->json(['message' => 'Cập nhật thành công'], 200);
        }

        return response()->json(['message' => 'Cập nhật thất bại'], 200);
    }

    // Xóa Like
    public function deleteLike($id)
    {
        $deleted = $this->likeRepository->delete($id);
        if ($deleted) {
            return response()->json(['message' => 'Xóa thành công']);
        }
        return response()->json(['message' => 'Xóa thất bại'], 200);
    }


    public function share_page()
    {
        return view('Exploitation::share_page');
    }

    public function getAllShares()
    {
        return $this->shareRepository->findAll();
    }

    // Lấy Share theo ID
    public function getShareById($id)
    {
        $share = $this->shareRepository->findById($id);
        if ($share) {
            return response()->json([
                'uid_share'      => $share->uid_share,
                'quantity'       => $share->quantity,
                'daily_run'      => $share->daily_run,
                'delay'          => $share->delay,
                'note'           => $share->note,
                'last_run'       => $share->last_run,
                'share_start'   => $share->share_start,
                'share_stop'    => $share->share_stop,
                'today_run'      => $share->today_run,
                '_id'            => [
                    '$oid' => (string) $share->_id
                ]
            ]);
        }
        return response()->json(['message' => 'Share not found'], 404);
    }

    // Tạo mới Share
    public function createShare(Request $request)
    {
        // Bước 1: Xác thực dữ liệu đầu vào
        $data = $request->validate([
            'uid_share'     => 'required|string',
            'quantity'      => 'required|integer',
            'daily_run'     => 'required|integer',
            'delay'         => 'required|integer',
            'note'          => 'nullable|string',
        ]);

        // Không cần kiểm tra số lượng tài khoản

        $data['last_run']     = date("Y/m/d H:i:s");
        $data['share_start'] = 0;
        $data['share_stop']  = 0;
        $data['today_run']    = 0;

        $this->shareRepository->create($data);

        return response()->json(['message' => 'Thêm mới thành công'], 201);
    }

    // Cập nhật Share
    public function updateShare(Request $request, $id)
    {
        $data = $request->validate([
            'uid_share'     => 'required|string',
            'quantity'      => 'required|integer',
            'daily_run'     => 'required|integer',
            'delay'         => 'required|integer',
            'note'          => 'nullable|string',
        ]);

        // Không cần kiểm tra số lượng tài khoản

        $data['last_run'] = date("Y/m/d H:i:s"); // Cập nhật thời gian chạy lại
        // Có thể cập nhật các trường khác nếu cần

        $updated = $this->shareRepository->update($id, $data);

        if ($updated) {
            return response()->json(['message' => 'Cập nhật thành công'], 200);
        }

        return response()->json(['message' => 'Cập nhật thất bại'], 200);
    }

    // Xóa Share
    public function deleteShare($id)
    {
        $deleted = $this->shareRepository->delete($id);
        if ($deleted) {
            return response()->json(['message' => 'Xóa thành công']);
        }
        return response()->json(['message' => 'Xóa thất bại'], 200);
    }
}
